from datetime import datetime, timedelta
import pandas as pd

"""
File to read the csv generated by shortcut to report the 
stories that have been updated in the last 7 days
and save the report in a markdown file
"""

# Current date
current_date = datetime.now()

# Calculate the date 7 days ago from the current date
date_7_days_ago = current_date - timedelta(days=7)

file_name = '5LeagueReportFeb13'
data = pd.read_csv(f'csv/{file_name}.csv')

# Convert 'updated_at' column to datetime format for comparison
data['updated_at'] = pd.to_datetime(data['updated_at'], format='%Y/%m/%d %H:%M:%S')

# Filter stories updated within the last 7 days
recent_updates = data[data['updated_at'] >= date_7_days_ago]

# Group stories by their state and prepare the markdown report
states_of_interest = ['Met Definition of Done', 'In Progress', 'Sprint Backlog (Refined)']

markdown_report = ""

for state in states_of_interest:
    # Filter stories by the current state
    state_stories = recent_updates[recent_updates['state'] == state][['name', 'owners', 'tasks']]
    
    # If there are stories in the current state, format them into markdown
    if not state_stories.empty:
        markdown_report += f"## {state} Stories\n"
        for _, story in state_stories.iterrows():
            markdown_report += f"- **Name**: {story['name']}\n"
            markdown_report += f"  - **Owner**: {story['owners']}\n"
            markdown_report += f"  - **Tasks**:\n"
            if pd.notnull(story['tasks']):
                for task in story['tasks'].split(';'):
                    markdown_report += f"    - {task}\n"
            else:
                markdown_report += "    - No tasks specified\n"
        markdown_report += "\n"

# Display the markdown report
print(markdown_report)

report_file_path = f'md/{file_name}.md'

with open(report_file_path, 'w') as file:
    file.write(markdown_report)
